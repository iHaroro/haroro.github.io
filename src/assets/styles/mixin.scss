@mixin aWH($width:auto, $height:auto) {
    width: $width+px;
    height: $height+px;
}

@mixin aWHA($width, $height, $top: auto, $bottom: auto) {
    width: $width+px;
    height: $height+px;
    @include aPosition(absolute, $top, auto, $bottom, 50%);
    margin-left: -$width/2+px;
}

@mixin aPosition($position: relative, $top:auto, $right:auto, $bottom:auto, $left:auto) {
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

@mixin aPositionA($position: relative, $top: auto, $right: auto, $bottom: auto, $left: auto) {
    @include aPosition($position, $top, $right, $bottom, $left);
}

@mixin aBgcolor($color:transparent) {
    background-color: $color;
}

@mixin aBgimg($img) {
    background-image: url($img);
    background-repeat: no-repeat;
    background-size: cover;
}

@mixin aFont($size: normal, $color: inherit, $weight: normal, $family: inherit) {
    font-size: $size+px;
    color: $color;
    font-weight: $weight;
    font-family: $family;
}

@mixin aFontA($size: normal, $color: inherit, $weight: normal, $family: inherit) {
    @include aFont($size, $color, $weight, $family);
}

// column
@mixin aFlex($justify:center, $items: center, $mutialign:center, $direction: row, $wrap: nowrap, $display: flex) {
    display: $display;
    justify-content: $justify;
    align-items: $items;
    align-content: $mutialign;
    flex-direction: $direction;
    flex-wrap: $wrap;
}

@mixin aText($lineHeight: normal, $align: center) {
    text-align: $align;
    line-height: $lineHeight;
}

@mixin aTextA($lineHeight: normal, $align: center) {
    text-align: $align;
    line-height: $lineHeight;
}

@mixin aBorder($bcolor, $bW, $radius, $style:solid) {
    border-width: $bW+px;
    border-style: $style;
    border-color: $bcolor;
    border-radius: $radius;
}

@mixin aBoxSizing($top:auto, $right:auto, $bottom:auto, $left:auto, $box:border-box) {
    @if ($top=='auto') {
        padding-top: 0;
    }
    @else {
        padding-top: $top+px;
    }
    @if ($right=='auto') {
        padding-right: 0;
    }
    @else {
        padding-right: $right+px;
    }
    @if ($bottom=='auto') {
        padding-bottom: 0;
    }
    @else {
        padding-bottom: $bottom+px;
    }

    @if ($left=='auto') {
        padding-left: 0;
    }

    @else {
        padding-left: $left+px;
    }

    box-sizing:$box;
}

/*
    块模型
*/

@mixin block($w:auto, $h:auto) {
    display: block;
    width: $w+px;
    height: $h+px;
}

/*
    行内块元素模型
*/
@mixin inlineblock($w:auto, $h:auto) {
    display: inline-block;
    width: $w+px;
    height: $h+px;
}

/*
    居中块模型
*/

@mixin centerBlock($w:auto, $h:auto) {
    @include block($w, $h);
    margin-left: auto;
    margin-right: auto;
}

/*
    浮动块模型
*/

@mixin floatBlock($dir: right, $w:auto, $h:auto) {
    @include block($w, $h);
    float: $dir;
}

/*
    绝对定位块模型
*/

@mixin absolute($w:auto, $h:auto, $top:auto, $right:auto, $bottom:auto, $left:auto) {
    position: absolute;
    width: $w+px;
    height: $h+px;
    top: $top+px;
    right: $right+px;
    bottom: $bottom+px;
    left: $left+px;
}

/*
    水平居中绝对定位模型
*/

@mixin absoluteHorCenter($w:auto, $h:auto, $top:auto, $bottom:auto) {
    position: absolute;
    width: $w;
    height: $h;
    top: $top;
    bottom: $bottom;
    left: 50%;
    margin-left: - 0.5*$w+px;
}

/*
    垂直居中绝对定位模型
*/

@mixin absoluteVerCenter($w:auto, $h:auto, $left:auto, $right:auto, $parentH:auto) {
    position: absolute;
    width: $w;
    height: $h;
    left: $left;
    $right: $right;
    margin-top: ($parentH - $h)*0.5+px;
}

/*
    水平垂直居中绝对定位模型
*/

@mixin absoluteVhCenter($w:auto, $h:auto) {
    position: absolute;
    width: $w+px;
    height: $h+px;
    left: 0;
    right: 0;
    bottom: 0;
    top: 0;
    margin: auto;
}

/*
    固定定位模型
*/

@mixin fixed($w:auto, $h:auto, $top:auto, $right:auto, $bottom:auto, $left:auto) {
    position: fixed;
    width: $w+px;
    height: $h+px;
    top: $top+px;
    right: $right+px;
    bottom: $bottom+px;
    left: $left+px;
}

/*
    全屏固定定位模型
*/

@mixin fixedFull() {
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

/*
    居中固定模型
*/

@mixin fixedHorCenter($w:auto, $h:auto, $top:auto, $bottom:auto) {
    position: fixed;
    width: $w+px;
    height: $h+px;
    top: $top+px;
    bottom: $bottom+px;
    left: 50%;
    margin-left: - 0.5*$w+px;
}

/*
    弹性布局
*/

@mixin flex($w, $h) {
    display: flex;
    width: $w+px;
    height: $h+px;
}

/*
    弹性垂直居中布局
*/
@mixin flexMiddle() {
    display: flex;
    align-items: center;
}

/*
    弹性子元素中心布局
*/
@mixin flexCenterMiddle() {
    display: flex;
    justify-content: center;
    align-items: center;
}

/*
    字体大小
*/
@mixin font($size:auto, $color:auto) {
    font-size: $size+px;
    color: $color;
}

/*
    添加背景图
*/

@mixin backgroundSet($img:auto, $size:auto, $position:center, $repeat:no-repeat) {
    background-image: url($img);
    background-size: $size;
    background-position: $position;
    background-repeat: $repeat;
}

// 单行省略
@mixin singleEls {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// placeholder颜色
@mixin placeHolder($bg) {
  input::-webkit-input-placeholder {
    color: $bg;
  }
  input::-moz-placeholder {
    color: $bg;
  }
  input:-moz-placeholder {
    color: $bg;
  }
  input:-ms-input-placeholder {
    color: $bg;
  }
}

// placeholder字体大小
@mixin placeHolderSize($size) {
  input::-webkit-input-placeholder {
    font-size: $size;
  }
  input::-moz-placeholder {
    font-size: $size;
  }
  input:-moz-placeholder {
    font-size: $size;
  }
  input:-ms-input-placeholder {
    font-size: $size;
  }
}

// 媒体查询兼容iphoneX
@mixin iphoneX($height) {
  height: $height;
  @media only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) {
    height: $height + 34
  }
}

// 底部安全距离，注意检查模板html文件meta中是否声明了viewport-fit=cover
// The env() function shipped in iOS 11 with the name constant().
// Beginning with Safari Technology Preview 41 and the iOS 11.2 beta, constant() has been removed and replaced with env().
// You can use the CSS fallback mechanism to support both versions, if necessary, but should prefer env() going forward.
/**
 * 安全外边距 margin-bottom
 * $height 传入像素数据 如 0px、100px
 **/
@mixin safeMarginBottom($height) {
    margin-bottom: $height;
    @if $height == 0px {
        margin-bottom: constant(safe-area-inset-bottom);
        margin-bottom: env(safe-area-inset-bottom);
    } @else {
        margin-bottom: calc(#{$height} + constant(safe-area-inset-bottom));
        margin-bottom: calc(#{$height} + env(safe-area-inset-bottom));
    }
}

/**
 * 安全内边距 padding-bottom
 * $height 传入像素数据 如 0px、100px
 **/
@mixin safePaddingBottom($height) {
    padding-bottom: $height;
    @if $height == 0px {
        padding-bottom: constant(safe-area-inset-bottom);
        padding-bottom: env(safe-area-inset-bottom);
    } @else {
        padding-bottom: calc(#{$height} + constant(safe-area-inset-bottom));
        padding-bottom: calc(#{$height} + env(safe-area-inset-bottom));
    }
}

/**
 * 安全底部定位 bottom
 * $height 传入像素数据 如 0px、100px
 **/
@mixin safePositionBottom($height) {
    bottom: $height;
    @if $height == 0px {
        bottom: constant(safe-area-inset-bottom);
        bottom: env(safe-area-inset-bottom);
    } @else {
        bottom: calc(#{$height} + constant(safe-area-inset-bottom));
        bottom: calc(#{$height} + env(safe-area-inset-bottom));
    }
}

/**
 * 安全底部元素高度 height
 * $height 传入像素数据 如 0px、100px
 **/
@mixin safeBoxHeight($height) {
    height: $height;
    @if $height == 0px {
        height: constant(safe-area-inset-bottom);
        height: env(safe-area-inset-bottom);
    } @else {
        height: calc(#{$height} + constant(safe-area-inset-bottom));
        height: calc(#{$height} + env(safe-area-inset-bottom));
    }
}
